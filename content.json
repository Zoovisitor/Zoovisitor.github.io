{"meta":{"title":"Blogs","subtitle":null,"description":null,"author":"wcy","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Hadoop分布式文件系统（HDFS）","slug":"Hadoop分布式文件系统（HDFS）","date":"2017-07-30T13:35:03.000Z","updated":"2017-08-01T16:06:58.000Z","comments":true,"path":"2017/07/30/Hadoop分布式文件系统（HDFS）/","link":"","permalink":"http://yoursite.com/2017/07/30/Hadoop分布式文件系统（HDFS）/","excerpt":"","text":"1 设计目的 易于扩展的分布式文件系统 运行在大量普通廉价机器上，提供完备的容错机制 为大量用户提供性能不错的文件存取服务 2 HDFS的概念2.1 数据块在磁盘中，每个磁盘都有默认的数据块大小，这是磁盘进行数据读、写的最小单位，磁盘块一般为512字节。在分布式文件系统中，数据块一般远大于磁盘块的大小，并且为磁盘块大小的整数倍，例如，HDFS block size默认为128MB。 分布式存储系统中选择大block size的主要原因是为了最小化寻址开销，使得磁盘传输数据的时间可以明显大于定位这个块所需的时间。然而，在HDFS中block size也不好设置的过大，这是因为MapReduce中的map任务通常一次处理一个块中的数据，因此如果block太大，则map数就会减少，作业运行的并行度就会受到影响，速度就会较慢。 使用数据块的这种设计主要有以下优势： 存储的文件大小可以大于集群中任意一个磁盘的容量。这很好理解，文件被划分到多个block中存储，对磁盘透明 使用block抽象而非整个文件作为存储单元，可以极大简化存储子系统的设计，因为block size是统一的，因此一个节点上可以存储多少block就是可以推算的 Block 非常适合用于数据备份，进而提供数据容错能力和可用性 2.2 元数据节点（NameNode）NameNode管理文件系统的命名空间，维护着文件系统树及整棵树内所有的文件和目录，这些信息以命名空间镜像文件和编辑日志文件的形式永久的保留在本地磁盘上。同时，NameNode也记录着每个文件中各个块所在的数据节点信息。 所有的文件访问都要通过NameNode来进行，所以NameNode至关重要，因此对NameNode实现容错非常重要，Hadoop为此提供了两种机制： 把文件元数据写入NFS（网络文件系统），备份在另一台机器上，并保持这些写操作是实时同步，且具有原子性 运行辅助的NameNode，不过这个NameNode并不提供服务，它只是把操作日志Merge到Metadata中，但是如果主NameNode失效，总是有一部分数据来不及Merge，会造成数据丢失，所以一般的做法还是把NFS中备份的数据拷贝到这个NameNode，并作为主NameNode运行 2.3 数据节点（DataNode）DataNode是文件系统的工作节点，它根据需要存储并检索数据块（受客户端或NameNode调度），并且定期向NameNode发送它们所存储的块的列表。 DataNode以数据块作为容错单位，通常一个数据块会被复制到三个DataNode上去。一旦某个数据块访问失效，则去其他备份的机器上去读取。并且会把这个数据块再进行一次复制，以达到备份标准。 也就是说，DataNode不是在机器级别上进行备份，而是在数据块级别上进行备份，这样就大大节省了机器数量。 2.4 联邦HDFSNameNode在内存中保存文件系统中每个文件和每个数据块的引用关系，这意味着对于一个拥有大量文件的超大集群来说，内存将成为限制系统横向扩展的瓶颈。在Hadoop 2.x中引入了联邦HDFS，允许系统通过添加NameNode实现扩展。其中，每个NameNode管理文件系统命名空间中的一部分。 在联邦环境下，每个NameNode维护一个命名空间卷，包括命名空间的元数据和在该命名空间下的文件的所有数据块的数据块池。命名空间卷之间相互独立，互相之间不相互通信，甚至当一个命名空间卷失效也不会影响由其他NameNode维护的命名空间卷的可用性。 3 HDFS的高可用性由于NameNode是唯一存储元数据与文件到数据块映射的地方，虽然系统拥有NameNode的容错机制，但是NameNode依然存在单点失效（SPOF）的问题。在这种情况下，管理员需要启动一个新的NameNode，新的NameNode需要满足以下情况才可以响应服务： 将命名空间的映像导入内存 重做编辑日志 接收到足够多的来自DataNode的数据块报告并退出安全模式 但是对于一个大型的集群来说，NameNode冷启动往往需要很长的时间。针对上述问题，Hadoop 2.x增加了对高可用性的支持，当活动的NameNode失效时，备用NameNode就会接管它的任务，并开始响应请求服务，不会有明显的中断，，实现这个一目标需要在架构上做如下修改： NameNode之间需要通过高可用的共享存储实现编辑日志的共享 DataNode需要同时向两个NameNode发送数据块处理报告 客户端需要使用特定的机制来处理NameNode的失效问题 注：故障转移控制器（早期基于ZooKepper实现）可以监视寄主NameNode是否失效（心跳机制），并在失效时进行故障切换。 4 文件读取5 文件写入6 一致模型7 HDFS不擅长的方面 低延迟和高吞吐率的数据访问，比如毫秒级 小文件存取，占用大量的NameNode内存，寻道时间超过读取时间 并发写入，文件随机读写，一个文件只能有一个writer，且仅支持append","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"http://yoursite.com/categories/Hadoop/"}],"tags":[]},{"title":"Hadoop参数调优","slug":"Hadoop参数调优","date":"2017-07-30T09:56:44.000Z","updated":"2017-07-30T14:13:40.000Z","comments":true,"path":"2017/07/30/Hadoop参数调优/","link":"","permalink":"http://yoursite.com/2017/07/30/Hadoop参数调优/","excerpt":"","text":"1 HDFS调优 设置合理的块大小（dfs.block.size） 将中间结果目录设置为分布在多个磁盘以提升写入速度 （mapred.local.dir） 设置DataNode处理RPC的线程数，大集群可以适当加大 （dfs.datanode.handler.count） 设置NameNode能同时 处理的请求数 （dfs.namenode.handler.count），数量为集群规模的自然对数（lnN）的20倍 2 YARN调优YARN的资源表示模型Container，Container将资源抽象为两个维度，内存和虚拟CPU核（vcore）,用于兼容各种计算框架和动态的分配资源，减少资源的浪费。 容量内存（yarn.nodemanager.resource.mmeory-mb） 最小容量内存（yarn.scheduler.minimum-allocation-mb） 容量内存递增（yarn.scheduler.increment-allocation-mb） 最大容量内存（yarn.scheduler.maximum-allocation-mb） 3 MapReduce调优（1）增大作业的并行程度，实质上是改变输入分片（input split）的大小，输入分片是一个逻辑概念，是一个MapTask的输入。再调优的过程中，尽量让输入分片与块大小一样，这样就能实现计算本地化，减少不必要的网络传输。计算公式为：max(mapred.min.split.size, min(mapred.max.split.size, dfs.block.size)) （2）给每个任务足够的资源（受限于YARN资源的配置） Map任务内存（mapreduce.map.memory.mb） Reduce任务内存（mapreduce.reduce.memory.mb） Map任务最大堆栈（mapreduce.map.java.opts.max.heep） Reduce任务最大堆栈（mapreduce.reduce.java.opts.max.heep） ApplicationMaster内存（yarn.app.mapreduce.am.resource.mb） （3）在满足前两个条件下，尽可能的给shuffle预留资源 最大洗牌链接（mapreduce.shuffle.max.connections） I/O排序内存缓存MiB（mapreduce.task.io.sort.mb） I/O排序因子（mapreduce.task.io.sort.factor） 洗牌期间并行传输的默认数量（mapreduce.reduce.shuffle.parallelcopies） 压缩Map输出（mapreduce.map.output.compress） 备注RPC（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"http://yoursite.com/categories/Hadoop/"}],"tags":[]}]}